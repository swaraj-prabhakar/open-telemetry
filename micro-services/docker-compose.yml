version: '3.9'
x-default-logging: &logging
  driver: "json-file"
  options:
    max-size: "5m"
    max-file: "2"

networks:
  default:
    name: micro-services
    driver: bridge

services:

  jaeger:
    image: jaegertracing/all-in-one
    container_name: jaeger
    command:
      - "--memory.max-traces"
      - "10000"
      - "--query.base-path"
      - "/jaeger/ui"
      - "--prometheus.server-url"
      - "http://${PROMETHEUS_ADDR}"
    deploy:
      resources:
        limits:
          memory: 300M
    restart: unless-stopped
    ports:
      - "8080:${JAEGER_SERVICE_PORT}"                    # Jaeger UI
      - "4317"                           # OTLP gRPC default port
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - METRICS_STORAGE_TYPE=prometheus
    logging: *logging
    

  prometheus:
    image: quay.io/prometheus/prometheus:v2.43.0
    container_name: prometheus
    user: root
    command:
      - --web.console.templates=/etc/prometheus/consoles
      - --web.console.libraries=/etc/prometheus/console_libraries
      - --storage.tsdb.retention.time=1h
      - --config.file=/etc/prometheus/prometheus-config.yaml
      - --storage.tsdb.path=/prometheus
      - --web.enable-lifecycle
      - --web.route-prefix=/
      - --enable-feature=exemplar-storage
    volumes:
      - ./prometheus/prometheus-config.yaml:/etc/prometheus/prometheus-config.yaml
    deploy:
      resources:
        limits:
          memory: 300M
    ports:
      - "${PROMETHEUS_SERVICE_PORT}:${PROMETHEUS_SERVICE_PORT}"
    logging: *logging
    

  grafana:
    image: grafana/grafana:9.4.7
    container_name: grafana
    deploy:
      resources:
        limits:
          memory: 100M
    volumes:
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    ports:
      - "${GRAFANA_SERVICE_PORT}:${GRAFANA_SERVICE_PORT}"
    logging: *logging
    

  otelcol:
    image: otel/opentelemetry-collector-contrib:0.75.0
    container_name: otel-col
    deploy:
      resources:
        limits:
          memory: 125M
    restart: unless-stopped
    command: [ "--feature-gates=service.connectors", "--config=/etc/otelcol-config.yml", "--config=/etc/otelcol-config-extras.yml" ]
    volumes:
      - ./otelcollector/otelcol-config.yml:/etc/otelcol-config.yml
      - ./otelcollector/otelcol-config-extras.yml:/etc/otelcol-config-extras.yml
    ports:
      - "4317:4317"          # OTLP over gRPC receiver
      - "4318:4318"     # OTLP over HTTP receiver
      - "9464"          # Prometheus exporter
      - "8888"          # metrics endpoint
    depends_on:
      - jaeger
    logging: *logging

  web-api1:
    image: web-api1:latest
    container_name: web-api1
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./WebApiProject1/Dockerfile
    ports:
      - "9901:80"
    depends_on:
      - otelcol
      - web-api2
    environment:
      - WebApiService2=http://web-api2
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otelcol:4317
      - OTEL_SERVICE_NAME=web-api1
    logging: *logging

  web-api2:
    image: web-api2:latest
    container_name: web-api2
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./WebApiProject2/Dockerfile
    ports:
      - "9902:80"
    depends_on:
      - otelcol
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otelcol:4317
      - OTEL_SERVICE_NAME=web-api12
    logging: *logging

  worker-service1:
    image: worker-service1:latest
    container_name: worker-service1
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./WorkerService1/Dockerfile
    depends_on:
      - otelcol
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otelcol:4317
      - OTEL_SERVICE_NAME=worker-service1
      - WebApiService2=http://web-api1
    logging: *logging
